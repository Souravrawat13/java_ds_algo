/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    HashMap<Integer,Node> hm= new HashMap<>();
    public Node cloneGraph(Node node) {
        
        if(node==null){
        return node;
        }
        
        return clone(node);
        
    }
    
    public Node clone(Node node){
        
        
        if(hm.containsKey(node.val)){
            return hm.get(node.val);
        }
        
        
        Node cl= new Node(node.val,new ArrayList<Node>());
        
        hm.put(node.val, cl);
        
        for(Node neighbors: node.neighbors){
            
            cl.neighbors.add(clone(neighbors));
        }
        
        return cl;
        
        
        
    }
}





 
