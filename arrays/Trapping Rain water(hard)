
//FIRST APPROACH DP//------

class Solution {
    public int trap(int[] height) {
        
        int n= height.length;
        if(n==0){
            return 0;
        }
        int[] left= new int[n];
        int[] right= new int[n];
        int tot=0;
        
        
        left[0]=height[0];
        for(int i=1;i<n;i++){
            
            left[i]= Math.max(left[i-1],height[i]);
            
        }
        
    
         right[n-1]= height[n-1];
            for(int i=n-2;i>=0;i--){
            
            right[i]= Math.max(right[i+1],height[i]);
            
        }
    
        for(int i=0;i<n;i++){
            
            tot+= Math.min(left[i],right[i])- height[i];
             
        }
        return tot;
         
    }
}


//2nd APPROACH USING TWO POINTERS O(1) SPACE COMPLEXITY//--
class Solution {
    public int trap(int[] height) {
       int n= height.length;
        int l=0;
        int r=n-1;
        int leftMax=0;
        int rightMax=0;
        int res=0;
        
        
        while(l<=r){
            
            if(height[l]<= height[r]){
                
                if(height[l]>=leftMax) leftMax= height[l];
                else res+= leftMax-height[l];
                
                
                l++;
                
                
                
            }else{
                
                if(height[r]>= rightMax) rightMax= height[r];
                else res += rightMax-height[r];
                
                
                r--;
            }
            
            
            
            
        }
        
        return res;
        
        
    }
}


