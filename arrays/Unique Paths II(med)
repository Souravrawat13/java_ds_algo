class Solution {
    public int uniquePathsWithObstacles(int[][] Grid) {
        int n=Grid.length;
        int m=Grid[0].length;
         int [][]dp= new int[n][m];
         boolean flag=false;
        
         for(int i=0;i<m;i++){
             if(flag || Grid[0][i]==1){
                 dp[0][i]=0;
                 flag=true;
             }
             else{
               dp[0][i]=1;   
             }
         }
        flag=false;
          for(int i=0;i<n;i++){
             if(flag || Grid[i][0]==1){
                 dp[i][0]=0;
                 flag=true;
             }
             else{
               dp[i][0]=1;   
             }
         }
        
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                
                if(Grid[i][j]==1){
                    dp[i][j]=0;
                }
                else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
                
                
            }
        }
        return dp[n-1][m-1];
        
        
    } 
}
///--Make a dp array in which mark element as 0 if the same element in grid array is 1 or 1 if it's 0-- in first row and column
/// loop through dp array by adding prev row and column in the current index is not 1;//
    
