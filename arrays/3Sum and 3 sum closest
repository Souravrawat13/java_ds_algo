class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list= new ArrayList<>();
         
        for(int i=0;i<nums.length-2;i++){
            
            if(i==0 || i>0 && nums[i]!=nums[i-1]){
                
                  int lo=i+1;
                int hi= nums.length-1;
                int sum=0-nums[i];
                
                while(lo<hi){
                    if(nums[lo]+nums[hi]==sum){
                        
                        list.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                        
                        while(lo<hi && nums[lo]==nums[lo+1]) lo++;
                        while(lo<hi && nums[hi]==nums[hi-1]) hi--;
                        lo++;
                        hi--;
                    } else if(nums[lo]+nums[hi]<sum) lo++;
                    else hi--;
                    
                }
            }
            
        }
        
       return list ;
        
    }
}

///3 Sum closest///---------

public int threeSumClosest(int[] nums, int target) {
    int diff = Integer.MAX_VALUE, sz = nums.length;
    Arrays.sort(nums);
    for (int i = 0; i < sz && diff != 0; ++i) {
        int lo = i + 1, hi = sz - 1;
        while (lo < hi) {
            int sum = nums[i] + nums[lo] + nums[hi];
            if (Math.abs(target - sum) < Math.abs(diff))
                diff = target - sum;
            if (sum < target)
                ++lo;
            else
                --hi;
        }
    }
    return target - diff;
}
