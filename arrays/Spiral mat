class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int row_st=0;
        int col_st=0;
        int row_end=matrix.length-1;
        int col_end=matrix[0].length-1;
       
        
        List<Integer> list= new ArrayList<>();
        
        while(row_st<=row_end &&col_st<=col_end ){
        //--Traverse right
            
            for(int j=col_st;j<=col_end;j++){
            
            list.add(matrix[row_st][j]);
        }
            row_st++;
            //-Traverse down//
            for(int i=row_st;i<=row_end;i++){
                list.add(matrix[i][col_end]);
                
            }
            col_end--;
            //Traverse left//
            if(row_st<=row_end){
            for(int j=col_end;j>=col_st;j--){
                list.add(matrix[row_end][j]);
            }
            }
            row_end--;
            //Traverse up//
            if(col_st<=col_end){
            for(int i=row_end;i>=row_st;i--){
                list.add(matrix[i][col_st]);
            }
            }
            col_st++;
        }
        
        return list;
    }
}




//--SPIRAL MATRIX 2--///
class Solution {
    public int[][] generateMatrix(int n) {
        
        int rowbeg=0;
        int colbeg=0;
        int rowend=n-1;
        int colend=n-1;
        int k=1;
        
        int[][] arr= new int[n][n];
        
       
        while(k<=n*n){
            
            for(int i=colbeg;i<=colend &&k<=n*n;i++){
                arr[rowbeg][i]=k;
                k++;
            }
            rowbeg++;
            
            for(int i=rowbeg;i<=rowend&&k<=n*n;i++){
                arr[i][colend]=k;
                k++;               
            }
            colend--;
            
             for(int i=colend;i>=colbeg &&k<=n*n;i--){
                 
                 arr[rowend][i]=k;
                 k++;
             }
            rowend--;
            for(int i=rowend;i>=rowbeg &&k<=n*n;i--){
                 
                 arr[i][colbeg]=k;
                 k++;
             }
            colbeg++;
            
            
        }
     return arr   ;
    }
}
  
