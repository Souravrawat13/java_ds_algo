class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list= new ArrayList<>();
        
        backtrack(nums,0,list,new ArrayList<>());
        return list;
    }
    
    
    
    public void backtrack(int[] nums,int i,List<List<Integer>> ml, List<Integer> tl){
        
       if(i==nums.length){
           ml.add(new ArrayList<>(tl));
           return;
       } 
         
       
            tl.add(nums[i]);
            
            backtrack(nums,i+1,ml,tl);
            
            tl.remove(tl.size()-1);
            backtrack(nums,i+1,ml,tl);
      
        
    }
}
  
  --//Subset II//--
  class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list= new ArrayList<>();
         
        
        subset(nums,0,list,new ArrayList<Integer>());
        return list;
        
    }
    
    
    public void subset( int[] nums,int pos, List<List<Integer>> ml, List<Integer> tl){
    
            ml.add(new ArrayList<>(tl));
            
        
        for(int i=pos;i<nums.length;i++){
            
            if(i>pos && nums[i]==nums[i-1]) continue;
            tl.add(nums[i]);
            subset(nums,i+1,ml,tl);
            tl.remove(tl.size()-1);
        }
    }
    
}
