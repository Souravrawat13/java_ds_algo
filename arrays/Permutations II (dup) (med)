class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
          Arrays.sort(nums);
        List<List<Integer>> list= new ArrayList<>();
        boolean [] bi= new boolean[nums.length];
        
        
        backTrack(nums,list,new ArrayList<>(),bi);
         return list;
    
    }


private void backTrack(int[] nums,List<List<Integer>> list,List<Integer> ds, boolean[] bi)
{
    
    if(ds.size()==nums.length){
         list.add(new ArrayList<>(ds));
         return;
    }
    
    for(int i=0;i<nums.length;i++)    
    {   
         if(bi[i] || i > 0 && nums[i] == nums[i-1] && !bi[i - 1]) continue;
        
        ds.add(nums[i]);
        bi[i] =true;
        
        backTrack(nums,list,ds,bi);
        ds.remove(ds.size()-1);
            bi[i]=false;
            
    
}

}
}

 
