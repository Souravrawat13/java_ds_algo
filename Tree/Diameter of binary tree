/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max=0;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        depth(root);
        return max-1;
    }
    
    
    
    public int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        
        int lh= depth(root.left);
        int rh= depth(root.right);
        
        max= Math.max(max,lh+rh+1);
        
        return Math.max(lh,rh)+1;
        
        
    }
}
// using Pair class///
class Solution {
     static class Diapair{
         int ht;
         int dia;
     }
    public int diameterOfBinaryTree(TreeNode root) {
        
        if(root==null){
            return 0;
        }
         Diapair mp= dia(root);
        return mp.dia -1;
      
        
        
    }
    
    public Diapair dia(TreeNode root){
         
       if(root==null){
           Diapair bp= new Diapair();
           bp.ht=0;
           bp.dia=0;
           return bp;
       } 
        
        Diapair lp= dia(root.left);
        Diapair rp= dia(root.right);
        
        Diapair mp= new Diapair();
        mp.ht= Math.max(lp.ht,rp.ht)+1;
        
        int fes= lp.ht+rp.ht+1;
        
        mp.dia= Math.max(fes,Math.max(lp.dia,rp.dia));
        
        
        return mp;
    }
    
    
}
